---
import Logo from "$comp/Logo.astro";
import type { Project, ProjectLinkType } from "$lib/projects/types";
import ProductCardStackItem from "./ProductCardStackItem.astro";

interface Props {
  project: Project;
}

const { project } = Astro.props;

const { label, desc, stack, links } = project;

function format_website_link(url: string, lab = false) {
  if (url.startsWith("http")) return url;
  let uri = Astro.site;
  if (!uri) throw new Error("Astro.site is not defined");
  if (lab) uri.hostname = `lab.${uri.hostname}`;
  uri.pathname = url;
  return uri.href;
}

function format_href(type: ProjectLinkType, href: string) {
  if (type === "npm") return `https://npmjs.com/package/${href}`;
  if (type === "repo") return `https://github.com/warsam-e/${href}`;
  return format_website_link(href, type === "lab");
}

function format_link_icon(type: ProjectLinkType) {
  if (type === "repo") return "logo_github";
  return "link";
}
---

<div class="project">
  <div class="project_links">
    {
      links.map(({ type, href }) => (
        <a
          href={format_href(type, href)}
          target="_blank"
          rel="noopener noreferrer"
          class="hover_effect"
        >
          {type === "npm" ? (
            <Logo name="npm" size="1.3rem" />
          ) : (
            <i class="f7-icons" data-type={type}>
              {format_link_icon(type)}
            </i>
          )}
        </a>
      ))
    }
  </div>
  <div class="meta">
    <div class="heading">
      <div class="label">{label}</div>
      <div class="stack">
        {stack.map((label) => <ProductCardStackItem {label} />)}
      </div>
    </div>
    <div class="desc">{desc}</div>
  </div>
</div>

<style lang="scss">
  .stack {
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.5rem;
  }

  .project_links {
    position: absolute;
    top: 1rem;
    right: 1rem;
    display: flex;
    align-items: center;
    gap: 0.8rem;
    > a {
      color: inherit;
      opacity: 0.8;
      > i {
        font-size: 1.3rem;
        &[data-type="repo"] {
          color: #333;
          @media (prefers-color-scheme: dark) {
            color: #ddd;
          }
        }
        &[data-type="website"],
        &[data-type="lab"] {
          color: var(--blue);
        }
      }
    }
  }

  .project {
    min-width: 0;
    width: 100%;
    color: inherit;
    text-decoration: none;
    padding: 1rem;
    border-radius: 1rem;
    position: relative;
    box-shadow: inset 0 0 0 1px rgba(#000, 0.1);
    @media (prefers-color-scheme: dark) {
      box-shadow: inset 0 0 0 1px rgba(#fff, 0.1);
    }
    > .meta {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      > .heading {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        > .label {
          font-size: 1rem;
          font-weight: 600;
        }
      }
      > .desc {
        opacity: 0.4;
        font-size: 0.8rem;
        font-weight: 500;
      }
    }
  }

  @media only screen and (max-width: 820px) {
    .project {
      > .content {
        flex-direction: column;
        align-items: flex-end;
        gap: 1rem;
        > .meta {
          > .heading {
            flex-direction: column;
            align-items: flex-start;
            > .label {
              font-size: 1.4rem;
            }
          }
        }
        > .links {
          > a {
            > i {
              font-size: 1.5rem;
            }
          }
        }
      }
    }
  }
</style>
